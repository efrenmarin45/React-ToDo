{"version":3,"sources":["App.js","index.js"],"names":["GET_TODOS","gql","TOGGLE_TODO","ADD_TODO","DELETE_TODO","App","useState","todoText","setTodoText","useQuery","data","loading","error","useMutation","toggleTodo","deleteTodo","onCompleted","addTodo","a","id","done","variables","toggleData","console","log","event","preventDefault","trim","text","refetchQueries","query","addData","update","cache","newTodo","readQuery","todos","filter","todo","writeQuery","deleteData","className","onSubmit","type","placeholder","onChange","target","value","map","onDoubleClick","handleToggleTodo","onClick","handleDeleteTodo","client","ApolloClient","uri","InMemoryCache","ReactDOM","render","document","getElementById"],"mappings":"+OAIMA,EAAYC,cAAH,yGAUTC,EAAcD,cAAH,oOAYXE,EAAWF,cAAH,8LAYRG,EAAcH,cAAH,8LA8FFI,MAlFf,WAAgB,IAAD,EACmBC,mBAAS,IAD5B,mBACNC,EADM,KACIC,EADJ,OAEkBC,mBAAST,GAAjCU,EAFM,EAENA,KAAMC,EAFA,EAEAA,QAASC,EAFT,EAESA,MAFT,EAGQC,sBAAYX,GAA1BY,EAHM,sBAIQD,sBAAYT,GAA1BW,EAJM,sBAKKF,sBAAYV,EAAU,CACtCa,YAAa,kBAAMR,EAAY,OAD1BS,EALM,gEASb,iCAAAC,EAAA,6DAAiCC,EAAjC,EAAiCA,GAAIC,EAArC,EAAqCA,KAArC,SAC2BN,EAAW,CAACO,UAAW,CAACF,KAAIC,MAAOA,KAD9D,OACQE,EADR,OAEEC,QAAQC,IAAIF,GAFd,4CATa,kEAcb,WAA6BG,GAA7B,eAAAP,EAAA,yDACEO,EAAMC,iBACFnB,EAASoB,OAFf,iEAIwBV,EAAQ,CAC5BI,UAAW,CAACO,KAAMrB,GAClBsB,eAAgB,CACd,CAACC,MAAO9B,MAPd,OAIQ+B,EAJR,OAUER,QAAQC,IAAIO,GAVd,4CAda,kEA2Bb,+BAAAb,EAAA,6DAAiCC,EAAjC,EAAiCA,GAAjC,SAC2BJ,EAAW,CAClCM,UAAW,CAACF,MACZa,OAAQ,SAAAC,GACN,IACMC,EADWD,EAAME,UAAU,CAACL,MAAO9B,IAChBoC,MAAMC,QAAO,SAAAC,GAAI,OAAIA,EAAKnB,KAAOA,KAC1Dc,EAAMM,WAAW,CAACT,MAAO9B,EAAWU,KAAM,CAAC0B,MAAOF,QANxD,OACQM,EADR,OASEjB,QAAQC,IAAIgB,GATd,4CA3Ba,sBAuCb,OAAI7B,EAEA,6CAGAC,EAEE,qDAIF,sBAAK6B,UAAU,YAAf,UACE,qBAAKA,UAAU,aAAf,SACE,oBAAIA,UAAU,QAAd,4BAEF,sBAAKA,UAAU,cAAf,UACE,uBAAMC,SAvDD,4CAuDL,UACE,uBACEC,KAAK,OACLC,YAAY,uBACZC,SAAU,SAAApB,GAAK,OAAIjB,EAAYiB,EAAMqB,OAAOC,QAC5CA,MAAOxC,IAET,wBAAQkC,UAAU,YAAYE,KAAK,SAAnC,uBAEF,qBAAKF,UAAU,QAAf,SACE,qEAAuC,uBAAvC,yDAGJ,qBAAKA,UAAU,QAAf,SACG/B,EAAK0B,MAAMY,KAAI,SAAAV,GAAI,OAClB,oBAAGW,cAAe,kBAtEf,2CAsEqBC,CAAiBZ,IAAzC,UACE,sBAAMG,UAAS,mBAAcH,EAAKlB,MAAQ,UAA1C,SACGkB,EAAKV,OAER,wBAAQa,UAAU,SAASU,QAAS,kBA1EnC,2CA0EyCC,CAAiBd,IAA3D,qBAJmDA,EAAKnB,aCnHhEkC,EAAS,IAAIC,eAAa,CAC9BC,IAAK,kDACLtB,MAAO,IAAIuB,kBAGbC,IAASC,OACP,cAAC,iBAAD,CAAgBL,OAAQA,EAAxB,SACE,cAAC,EAAD,MAEFM,SAASC,eAAe,W","file":"static/js/main.7bb19ddf.chunk.js","sourcesContent":["import './App.css';\nimport { useQuery, gql, useMutation } from '@apollo/client';\nimport React, {useState} from 'react';\n\nconst GET_TODOS = gql`\n  query getTodos{\n    todos{\n      id\n      text\n      done\n    }\n  }\n`\n\nconst TOGGLE_TODO = gql`\n  mutation toggleTodo($id: uuid!, $done: Boolean!) {\n    update_todos(where: {id: {_eq: $id}}, _set: {done: $done}) {\n      returning {\n        done\n        id\n        text\n      }\n    }\n  }\n`\n\nconst ADD_TODO = gql`\n  mutation addTodo($text: String!) {\n    insert_todos(objects: {text: $text}) {\n      returning {\n        done\n        id\n        text\n      }\n    }\n  }\n`\n\nconst DELETE_TODO = gql`\n  mutation deleteTodo($id: uuid!) {\n    delete_todos(where: {id: {_eq: $id}}) {\n      returning {\n        done\n        id\n        text\n      }\n    }\n  }\n`\n\nfunction App() {\n  const [todoText, setTodoText] = useState('');\n  const {data, loading, error} = useQuery(GET_TODOS);\n  const [toggleTodo] = useMutation(TOGGLE_TODO);\n  const [deleteTodo] = useMutation(DELETE_TODO);\n  const [addTodo] = useMutation(ADD_TODO, {\n    onCompleted: () => setTodoText('')\n  });\n\n  async function handleToggleTodo({id, done}){\n    const toggleData = await toggleTodo({variables: {id, done: !done}});\n    console.log(toggleData);\n  }\n\n  async function handleAddTodo(event){\n    event.preventDefault();\n    if(!todoText.trim())\n      return;\n    const addData = await addTodo({\n      variables: {text: todoText},\n      refetchQueries: [\n        {query: GET_TODOS}\n      ]\n    });\n    console.log(addData)\n  }\n\n  async function handleDeleteTodo({id}){\n    const deleteData = await deleteTodo({\n      variables: {id},\n      update: cache => {\n        const prevData = cache.readQuery({query: GET_TODOS})\n        const newTodo = prevData.todos.filter(todo => todo.id !== id)\n        cache.writeQuery({query: GET_TODOS, data: {todos: newTodo}});\n      }\n    });\n    console.log(deleteData);\n  }\n\n  if (loading)\n    return(\n      <div>Loading...</div>\n    )\n\n  if (error)\n    return(\n        <h1>Error fetching Data</h1>\n    )\n\n    return(\n      <div className=\"container\">\n        <div className=\"topSection\">\n          <h1 className=\"title\">Things To Do</h1>\n        </div>\n        <div className=\"formSection\">\n          <form onSubmit={handleAddTodo}>\n            <input \n              type=\"text\" \n              placeholder=\"Add a goal for today\" \n              onChange={event => setTodoText(event.target.value)}\n              value={todoText}\n              />\n            <button className=\"createBtn\" type=\"submit\">Create</button>\n          </form>\n          <div className=\"intro\">\n            <p>Double click a goal to mark it done.<br></br> Select the 'X' to remove the goal altogether.</p>\n          </div>\n        </div>\n        <div className=\"todos\">\n          {data.todos.map(todo => (\n            <p onDoubleClick={() => handleToggleTodo(todo)} key={todo.id}>\n              <span className={`todoText ${todo.done && 'strike'}`}>\n                {todo.text}\n              </span>\n              <button className=\"delete\" onClick={() => handleDeleteTodo(todo)}> &times;</button>\n            </p>\n          ))}\n        </div>\n    </div>\n    )\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { ApolloClient, InMemoryCache, ApolloProvider } from '@apollo/client';\n\nconst client = new ApolloClient({\n  uri: 'https://react-todo-apollo.hasura.app/v1/graphql',\n  cache: new InMemoryCache()\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}